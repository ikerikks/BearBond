import User from '../models/user.model.js';
import generateTokenAndSetCookie from '../lib/utils/generateTokens.js';
import bcrypt from 'bcryptjs';

const signup = async (req, res) => {
  try {
    const { fullName, userName, email, password } = req.body;

    if (fullName) {
      if (fullName.trim().split(' ').length < 2) {
        return res.status(400).json({ error: 'Full name should contain at least 2 words' });
      }
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // email valid ? (regular expression)
    
    if (!emailRegex.test(email)) {
      return res.status(400).json({error: 'Invalid email format'});
    }
    
    const userExists = await User.findOne({userName}) // find if the username already exists by looking into the users table/collection (Database);
    if (userExists) {
      return res.status(400).json({error: 'User name already taken'});
    }
    
    const emailExists = await User.findOne({email}) // same for email
    if (emailExists) {
      return res.status(400).json({error: 'You already have an account'});
    }

    if (password.length < 6) {
      return res.status(400).json({error: 'Password should be minimum 6 characters long'});
    }

    // hash password
    const salt = await bcrypt.genSalt(10); // random string added to the password before hashing it = more secure & enables to have same passwords)
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User ({
      fullName,
      userName,
      email,
      password: hashedPassword,
    });

    if (newUser) {
      generateTokenAndSetCookie(newUser._id, res);
      await newUser.save();

      res.status(201).json({ // something created successfully
        _id: newUser._id, // already generated by mongodb
        fullName: newUser.fullName,
        userName: newUser.userName,
        email: newUser.email,
        profileImg: newUser.profileImg,
        coverImg: newUser.coverImg
      }); 

    } else {
      res.status(400).json({error: 'Invalid user data'});
    }

  } catch (err) {
    console.log('Error in the signup process:', err);
    res.status(500).json({error: 'Server error'});
  }
}

const login = async (req, res) => {

  try {
    const { userName, password } = req.body;
    const user = await User.findOne({userName}) // find if the username already exists by looking into the users table/collection (Database);
    const validPassword = await bcrypt.compare(password, user?.password || ''); // if theres not a value compare it to an empty string so the app doesn't crash

    if (!user || !validPassword) {
      return res.status(400).json({error: 'username or password invalid'});
    }

    generateTokenAndSetCookie(user._id, res);

    res.status(200).json({
      _id: user._id,
      fullName: user.fullName,
      userName: user.userName,
      email: user.email,
      profileImg: user.profileImg,
      coverImg: user.coverImg
    }); 

  } catch (err) {
    console.log('Error in the login process:', err);
    res.status(500).json({error: 'Server error'});
  }
}

const logout = async (req, res) => {
  try {
    res.cookie('jwt', '', {maxAge: 0});
    res.status(200).json({message: 'logged out with success'});
  } catch (error) {
    console.log('Error in the logout process:', err);
    res.status(500).json({error: 'Server error'});
  }
}

const authVerification = async (req, res) => { // is user authenticated or not ?
  try {
    const user = await User.findById(req.user._id).select('-password');

    if (!user) {
      return res.status(404).json({error: 'user not found'});
    }
    res.status(200).json(user);
  } catch (err) {
    console.log('Error in the authentication process:', err);
    res.status(500).json({error: 'Server error'});
  }
}

export { signup, login, logout, authVerification };